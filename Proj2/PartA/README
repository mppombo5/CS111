NAME: Matthew Pombo
EMAIL: mppombo5@gmail.com
ID: 405140036

Q 2.1.1
It takes many iterations to see errors because each thread performs more operations on the pointer with increasing iterations; with more iterations, there are more opportunities for data races. Conversely, with relatively few iterations there are significantly less opportunities for race conditions.

Q 2.1.2
The --yield runs are slower because each thread is being interrupted halfway through its addition procedure, and this doubles the number of context switches in the processor. We would not be able to get as accurate a per-operation timing with the --yield option, because the time to perform context switches builds up quickly and is not representative of how long it takes to perform the actual addition.

Q 2.1.3
When the number of iterations is small, the majority of the total running time is spent setting up and spawning the pthreads, and the actual time to add and subtract from the counter is very short. As we add more and more iterations, the setup time becomes negligible, and the majority of the time is spent performing the (fast) additions and subtractions, so the average time per operation is greatly decreased.

Q 2.1.4
When the number of threads is small, there is not much locking or context switching to be done; hence, all implementations behave roughly the same. When the number of threads is high with synchronization, however, there are many checks that have to be done with the locking and unlocking to prevent race conditions.

Q 2.2.1
The time for pthread mutex operations seem to grow quickly at first, but then are very slow to increase; the growth looks almost logarithmic. This could be because as you add more and more threads, the cost of checking the locks becomes negligible as more operations are performed, lowering the overall average time per operation.

Q 2.2.2
The mutex implementation seems to grow slower than the spin-lock implementation; this could be because the mutex is made specifically for threads, while the spin-lock implementation is simply using a builtin function with a regular variable to hack together thread-safe operations.

The scripts 'gencsv', 'gencsvy', 'listcsv', 'addplots.sh', and 'listplots.sh' were made to aid in the creation of .csv files and .png graphs.
